{
  "version": 3,
  "sources": ["../../../../../../node_modules/@capacitor/preferences/dist/esm/web.js"],
  "sourcesContent": ["import { WebPlugin } from '@capacitor/core';\nexport class PreferencesWeb extends WebPlugin {\n  constructor() {\n    super(...arguments);\n    this.group = 'CapacitorStorage';\n  }\n  async configure({\n    group\n  }) {\n    if (typeof group === 'string') {\n      this.group = group;\n    }\n  }\n  async get(options) {\n    const value = this.impl.getItem(this.applyPrefix(options.key));\n    return {\n      value\n    };\n  }\n  async set(options) {\n    this.impl.setItem(this.applyPrefix(options.key), options.value);\n  }\n  async remove(options) {\n    this.impl.removeItem(this.applyPrefix(options.key));\n  }\n  async keys() {\n    const keys = this.rawKeys().map(k => k.substring(this.prefix.length));\n    return {\n      keys\n    };\n  }\n  async clear() {\n    for (const key of this.rawKeys()) {\n      this.impl.removeItem(key);\n    }\n  }\n  async migrate() {\n    var _a;\n    const migrated = [];\n    const existing = [];\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      const key = oldkey.substring(oldprefix.length);\n      const value = (_a = this.impl.getItem(oldkey)) !== null && _a !== void 0 ? _a : '';\n      const {\n        value: currentValue\n      } = await this.get({\n        key\n      });\n      if (typeof currentValue === 'string') {\n        existing.push(key);\n      } else {\n        await this.set({\n          key,\n          value\n        });\n        migrated.push(key);\n      }\n    }\n    return {\n      migrated,\n      existing\n    };\n  }\n  async removeOld() {\n    const oldprefix = '_cap_';\n    const keys = Object.keys(this.impl).filter(k => k.indexOf(oldprefix) === 0);\n    for (const oldkey of keys) {\n      this.impl.removeItem(oldkey);\n    }\n  }\n  get impl() {\n    return window.localStorage;\n  }\n  get prefix() {\n    return this.group === 'NativeStorage' ? '' : `${this.group}.`;\n  }\n  rawKeys() {\n    return Object.keys(this.impl).filter(k => k.indexOf(this.prefix) === 0);\n  }\n  applyPrefix(key) {\n    return this.prefix + key;\n  }\n}\n"],
  "mappings": ";;;;;;;;AACO,IAAM,iBAAN,cAA6B,UAAU;AAAA,EAC5C,cAAc;AACZ,UAAM,GAAG,SAAS;AAClB,SAAK,QAAQ;AAAA,EACf;AAAA,EACM,UAAU,IAEb;AAAA,+CAFa;AAAA,MACd;AAAA,IACF,GAAG;AACD,UAAI,OAAO,UAAU,UAAU;AAC7B,aAAK,QAAQ;AAAA,MACf;AAAA,IACF;AAAA;AAAA,EACM,IAAI,SAAS;AAAA;AACjB,YAAM,QAAQ,KAAK,KAAK,QAAQ,KAAK,YAAY,QAAQ,GAAG,CAAC;AAC7D,aAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF;AAAA;AAAA,EACM,IAAI,SAAS;AAAA;AACjB,WAAK,KAAK,QAAQ,KAAK,YAAY,QAAQ,GAAG,GAAG,QAAQ,KAAK;AAAA,IAChE;AAAA;AAAA,EACM,OAAO,SAAS;AAAA;AACpB,WAAK,KAAK,WAAW,KAAK,YAAY,QAAQ,GAAG,CAAC;AAAA,IACpD;AAAA;AAAA,EACM,OAAO;AAAA;AACX,YAAM,OAAO,KAAK,QAAQ,EAAE,IAAI,OAAK,EAAE,UAAU,KAAK,OAAO,MAAM,CAAC;AACpE,aAAO;AAAA,QACL;AAAA,MACF;AAAA,IACF;AAAA;AAAA,EACM,QAAQ;AAAA;AACZ,iBAAW,OAAO,KAAK,QAAQ,GAAG;AAChC,aAAK,KAAK,WAAW,GAAG;AAAA,MAC1B;AAAA,IACF;AAAA;AAAA,EACM,UAAU;AAAA;AACd,UAAI;AACJ,YAAM,WAAW,CAAC;AAClB,YAAM,WAAW,CAAC;AAClB,YAAM,YAAY;AAClB,YAAM,OAAO,OAAO,KAAK,KAAK,IAAI,EAAE,OAAO,OAAK,EAAE,QAAQ,SAAS,MAAM,CAAC;AAC1E,iBAAW,UAAU,MAAM;AACzB,cAAM,MAAM,OAAO,UAAU,UAAU,MAAM;AAC7C,cAAM,SAAS,KAAK,KAAK,KAAK,QAAQ,MAAM,OAAO,QAAQ,OAAO,SAAS,KAAK;AAChF,cAAM;AAAA,UACJ,OAAO;AAAA,QACT,IAAI,MAAM,KAAK,IAAI;AAAA,UACjB;AAAA,QACF,CAAC;AACD,YAAI,OAAO,iBAAiB,UAAU;AACpC,mBAAS,KAAK,GAAG;AAAA,QACnB,OAAO;AACL,gBAAM,KAAK,IAAI;AAAA,YACb;AAAA,YACA;AAAA,UACF,CAAC;AACD,mBAAS,KAAK,GAAG;AAAA,QACnB;AAAA,MACF;AACA,aAAO;AAAA,QACL;AAAA,QACA;AAAA,MACF;AAAA,IACF;AAAA;AAAA,EACM,YAAY;AAAA;AAChB,YAAM,YAAY;AAClB,YAAM,OAAO,OAAO,KAAK,KAAK,IAAI,EAAE,OAAO,OAAK,EAAE,QAAQ,SAAS,MAAM,CAAC;AAC1E,iBAAW,UAAU,MAAM;AACzB,aAAK,KAAK,WAAW,MAAM;AAAA,MAC7B;AAAA,IACF;AAAA;AAAA,EACA,IAAI,OAAO;AACT,WAAO,OAAO;AAAA,EAChB;AAAA,EACA,IAAI,SAAS;AACX,WAAO,KAAK,UAAU,kBAAkB,KAAK,GAAG,KAAK,KAAK;AAAA,EAC5D;AAAA,EACA,UAAU;AACR,WAAO,OAAO,KAAK,KAAK,IAAI,EAAE,OAAO,OAAK,EAAE,QAAQ,KAAK,MAAM,MAAM,CAAC;AAAA,EACxE;AAAA,EACA,YAAY,KAAK;AACf,WAAO,KAAK,SAAS;AAAA,EACvB;AACF;",
  "names": []
}
